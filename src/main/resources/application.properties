# Node Identifier (can be unique per instance)
app.node-id=${APP_NODE_ID:node-1}

# Application name
spring.application.name=${SPRING_APPLICATION_NAME:messenger}

# Max size of a single file (e.g., 10MB)
spring.servlet.multipart.max-file-size=10MB

# Max size of entire request (e.g., 20MB if uploading multiple files)
spring.servlet.multipart.max-request-size=20MB

spring.servlet.multipart.resolve-lazily=true
server.tomcat.max-swallow-size=100MB

# Flyway configuration
spring.flyway.enabled=${FLYWAY_ENABLED:true}
spring.flyway.baseline-on-migrate=${FLYWAY_BASELINE_ON_MIGRATE:true}
spring.flyway.schemas=${FLYWAY_SCHEMAS:public}
spring.flyway.locations=${FLYWAY_LOCATIONS:classpath:db/migration}

# PostgreSQL DataSource
spring.datasource.url=${JDBC_DATABASE_URL:jdbc:postgresql://localhost:5432/messenger}
spring.datasource.username=${DB_USERNAME:app}
spring.datasource.password=${DB_PASSWORD:password}
spring.datasource.driver-class-name=${DB_DRIVER:org.postgresql.Driver}
spring.datasource.hikari.maximum-pool-size=${DB_POOL_MAX_SIZE:50}
spring.datasource.hikari.pool-name=${DB_POOL_NAME:coredb-pool}
spring.datasource.hikari.connection-timeout=${DB_CONNECTION_TIMEOUT:30000}
spring.datasource.hikari.idle-timeout=${DB_IDLE_TIMEOUT:30000}
spring.datasource.hikari.max-lifetime=${DB_MAX_LIFETIME:60000}

# Hibernate
spring.jpa.hibernate.ddl-auto=${HIBERNATE_DDL_AUTO:none}
spring.jpa.show-sql=${HIBERNATE_SHOW_SQL:true}

# Kafka Configuration
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

# Producer config
spring.kafka.producer.key-serializer=${KAFKA_PRODUCER_KEY_SERIALIZER:org.apache.kafka.common.serialization.StringSerializer}
spring.kafka.producer.value-serializer=${KAFKA_PRODUCER_VALUE_SERIALIZER:org.apache.kafka.common.serialization.StringSerializer}

# Consumer config
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:my-group}
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO_OFFSET_RESET:earliest}
spring.kafka.consumer.key-deserializer=${KAFKA_CONSUMER_KEY_DESERIALIZER:org.apache.kafka.common.serialization.StringDeserializer}
spring.kafka.consumer.value-deserializer=${KAFKA_CONSUMER_VALUE_DESERIALIZER:org.apache.kafka.common.serialization.StringDeserializer}

# Redis Config
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:yourStrongPasswordHere}

# Config URL (not strictly necessary unless custom Swagger setup)
springdoc.swagger-ui.url=${SWAGGER_CONFIG_URL:http://localhost:8080/v3/api-docs}
server.forward-headers-strategy=framework